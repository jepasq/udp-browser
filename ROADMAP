					-*-org-*-

* v1.0.0
** v0.1.0
*** v0.0.1
**** Add a search widget
- Included search engine let you discover new websites;
- An included IA (using libfann) try to suggest you new intersting websites;
  Maybe something like a 'for you' page or so
**** Improve serialization versionning scheme
  Actually just a constexpr in *lib/WebContent.cpp*.
- [ ] Could throw an exception if unreadable
- [ ] WebFile could delegate work to specialized classes wfV1, wfV2 etc...
  qo we could test and read old version archives.
**** Let's you create website on the fly
MainWindow, in its editor mode, have alist of basic HTML element
(div, span etc...) we can drag and drop

- [ ] Could have a basic webcontent template based on webfile

**** TODO Handle unit tests and CI
:LOGBOOK:
CLOCK: [2022-09-15 jeu. 22:49]--[2022-09-15 jeu. 23:04] =>  0:15
CLOCK: [2022-08-09 mar. 11:09]--[2022-08-09 mar. 11:18] =>  0:09
CLOCK: [2022-08-09 mar. 10:45]--[2022-08-09 mar. 10:50] =>  0:05
CLOCK: [2022-08-03 mer. 08:01]--[2022-08-03 mer. 08:09] =>  0:08
:END:
- [X] Create rule and add tests
  Trying to implement some for lib/Preferences
- [ ] Continue implementation
**** TODO Websites are called site@user
:LOGBOOK:
CLOCK: [2022-09-15 jeu. 22:04]--[2022-09-15 jeu. 22:29] =>  0:25
CLOCK: [2022-09-14 mer. 06:50]--[2022-09-14 mer. 07:05] =>  0:15
CLOCK: [2022-09-12 lun. 06:36]--[2022-09-12 lun. 06:51] =>  0:15
CLOCK: [2022-09-12 lun. 06:15]--[2022-09-12 lun. 06:30] =>  0:15
CLOCK: [2022-09-08 jeu. 06:00]--[2022-09-08 jeu. 06:28] =>  0:28
CLOCK: [2022-09-08 jeu. 05:28]--[2022-09-08 jeu. 05:48] =>  0:20
CLOCK: [2022-09-05 lun. 04:04]--[2022-09-05 lun. 04:08] =>  0:04
CLOCK: [2022-09-05 lun. 03:29]--[2022-09-05 lun. 03:50] =>  0:21
CLOCK: [2022-09-01 jeu. 04:22]--[2022-09-01 jeu. 04:35] =>  0:13
CLOCK: [2022-09-01 jeu. 04:00]--[2022-09-01 jeu. 04:12] =>  0:12
:END:
     User can be a name or a hashsum.
- [X] We must have a configuration file somewhere to keep username
  How to generate user name ? from MAC adress ?
- [X] Disk space is composed of chunk of fixed size (500Kb ?);
  - [X] WebContent is first compressed then signed then splited in chunks;
  Implement the WebContent class and serializer have a save/load(WebContent*)
  using Serializer
    - [X] May have a list of WebFile. Test this.
    - [X] Implement WebContent persistance. Already tested. Fails.
    - [X] Add a FileCompressor thing with possible subclasses
  - [X] May have a versionning scheme
  - [X] How to handle multiple websites for the same user ?
    - [X] We should have a User class with a list of WebContent
    - [X] User is then a member of MainWindow
    - [X] WebContent could have a name (first is default)
- [X] WebContent list should use shared_ptr otherwise, the WebFile* instanciated
  from the load() function can't be freed correctly
**** TODO [feature_libarchive] Testing libarchive
:LOGBOOK:
CLOCK: [2022-09-23 ven. 02:41]--[2022-09-23 ven. 02:49] =>  0:08
CLOCK: [2022-09-22 jeu. 05:13]--[2022-09-22 jeu. 05:33] =>  0:20
CLOCK: [2022-09-21 mer. 02:19]--[2022-09-21 mer. 02:32] =>  0:13
CLOCK: [2022-09-20 mar. 01:59]--[2022-09-20 mar. 02:11] =>  0:12
CLOCK: [2022-09-20 mar. 01:43]--[2022-09-20 mar. 01:52] =>  0:09
:END:
- [X] cmake must search for libarchive
- [X] Add install instruction in README
- [-] Test branch
  - [X] Add faLibArchive : public FileArchiver basic class
  - [ ] Add unit test for this (add two file, an output and test if we can
    read it back) and a process() function that build archive
  - [ ] Imlement this  
- [ ] If this works, merge
    
- [ ] WebContent load and save uses
  Created both empty clases
  - [ ] a FileArchiver superclass that create a single file from multiple ones
    Maybe libArchive, found in arch. but not sure we need both the
    archiver/compressor classes
  - [ ] a FileCompressor subclass to compress  archive and eventually compute hashsum
- When we need a chunk, we first ask for the last known revision, then
  ask our friends if they know this revision.
**** DONE Handle preference dialog
:LOGBOOK:
CLOCK: [2022-08-29 lun. 13:54]--[2022-08-29 lun. 14:11] =>  0:17
CLOCK: [2022-08-25 jeu. 16:01]--[2022-08-25 jeu. 16:17] =>  0:16
CLOCK: [2022-08-18 jeu. 12:37]--[2022-08-18 jeu. 13:18] =>  0:41
CLOCK: [2022-08-18 jeu. 12:14]--[2022-08-18 jeu. 12:17] =>  0:03
CLOCK: [2022-08-18 jeu. 11:06]--[2022-08-18 jeu. 11:48] =>  0:42
CLOCK: [2022-08-17 mer. 11:44]--[2022-08-17 mer. 11:52] =>  0:08
CLOCK: [2022-08-17 mer. 11:27]--[2022-08-17 mer. 11:35] =>  0:08
CLOCK: [2022-08-12 ven. 11:18]--[2022-08-12 ven. 11:33] =>  0:15
CLOCK: [2022-08-12 ven. 10:30]--[2022-08-12 ven. 10:49] =>  0:19
CLOCK: [2022-08-11 jeu. 11:21]--[2022-08-11 jeu. 11:36] =>  0:15
CLOCK: [2022-08-09 mar. 11:47]--[2022-08-09 mar. 12:11] =>  0:24
CLOCK: [2022-08-03 mer. 13:22]--[2022-08-03 mer. 13:35] =>  0:13
CLOCK: [2022-08-03 mer. 12:25]--[2022-08-03 mer. 12:58] =>  0:33
CLOCK: [2022-08-03 mer. 07:32]--[2022-08-03 mer. 07:47] =>  0:15
CLOCK: [2022-07-29 ven. 10:17]--[2022-07-29 ven. 10:39] =>  0:22
CLOCK: [2022-07-29 ven. 09:38]--[2022-07-29 ven. 10:08] =>  0:30
CLOCK: [2022-07-27 mer. 08:19]--[2022-07-27 mer. 08:51] =>  0:32
CLOCK: [2022-07-27 mer. 06:52]--[2022-07-27 mer. 07:07] =>  0:15
CLOCK: [2022-07-27 mer. 06:24]--[2022-07-27 mer. 06:39] =>  0:15
:END:
- [X] Hamburger menu should show a pane
- [X] Add Preferences to the Hamurger pane
- [X] Start the Preferences.ui file with =designer=
  and the PreferencesDialog class
- [X] Quota : you tell how many disk spaces it can use. :
  This space will be used to shadow copy others websites
- [X] Serialzer shouldn't return a file reference
- [X] Preferences saving works but the File reference could come from
  Serializer (not a temporary reference though)
- [X] Preferences may save quota in two field to keep UI layout
- [X] Change our username and save it in a Preferences class that only
  keeps these values (and can be serialized)
- [X] Opnening Preferences dialog should show Preferences values
  - [X] Pass main's Preferences object as parameter of MainWindow's ctor
  - [X] Also pass it at PreferencesDialog ctor
  - [X] Feed actual widgets with values
- [X] PreferencesDialog's quota unit initial values should come from code
- [X] PreferencesDialog should use unit map to handle both load and save's
  convertions from text to unit
- [X] Could add actual username in title bar (<username>@...)
- [X] Implement lib/Preferences serialization trying to inherits Serializer
  Should certainly make the stream variable protected in Serializer class
  - [X] Try to test preferences constructor with an optional filename
  - [X] Make actual preferences test work
    Maybe Serialize::save and load should return a QDataStream used by
    subclass to << and >> their members ?
**** DONE Main browser window is also an editor
:LOGBOOK:
CLOCK: [2022-07-22 ven. 09:50]--[2022-07-22 ven. 10:37] =>  0:47
CLOCK: [2022-07-20 mer. 07:53]--[2022-07-20 mer. 08:08] =>  0:15
CLOCK: [2022-07-19 mar. 06:06]--[2022-07-19 mar. 06:15] =>  0:09
CLOCK: [2022-07-13 mer. 02:31]--[2022-07-13 mer. 02:54] =>  0:23
CLOCK: [2022-07-13 mer. 01:38]--[2022-07-13 mer. 02:28] =>  0:50
CLOCK: [2022-07-13 mer. 00:55]--[2022-07-13 mer. 01:07] =>  0:12
CLOCK: [2022-07-13 mer. 00:31]--[2022-07-13 mer. 00:45] =>  0:14
CLOCK: [2022-07-12 mar. 03:53]--[2022-07-12 mar. 04:32] =>  0:39
CLOCK: [2022-07-12 mar. 02:46]--[2022-07-12 mar. 03:18] =>  0:32
CLOCK: [2022-07-11 lun. 02:35]--[2022-07-11 lun. 02:50] =>  0:15
CLOCK: [2022-07-08 ven. 02:23]--[2022-07-08 ven. 02:26] =>  0:03
:END:
     Should use the Qt WebEngine
- [X] main()'s package name and version comes from a generated config.h file
- [X] Ther's still a elecrud makefile rule : removed
- [X] cmake must search for Qt5
  and handle MOC files etc...
  see https://doc.qt.io/qt-5/cmake-get-started.html
- [X] MainWindow.ui design. WebWidget and editor are in a QStackedWidget
- [X] Understand how to use ui file
  see https://doc.qt.io/qt-6/designer-using-a-ui-file.html
- [X] MainWindow class has a mode value (browser||editor)
  Initial state is browser
  - [X] Handle its type
  - [X] Handle a onToggleMode private signal
  - [X] Must change page of stackedwidget
- [X] MainWindow's title should show project name and version
- [X] Must add a hanburger menu at the right of the Mode button
  At least with about/preferences choices
- [X] library handle files serialization (how ?)
  Try to use QDataStream
**** DONE Correct project setup
:LOGBOOK:
CLOCK: [2022-07-11 lun. 02:14]--[2022-07-11 lun. 02:21] =>  0:07
CLOCK: [2022-07-06 mer. 02:41]--[2022-07-06 mer. 02:51] =>  0:10
CLOCK: [2022-07-05 mar. 02:19]--[2022-07-05 mar. 02:26] =>  0:07
CLOCK: [2022-07-05 mar. 01:58]--[2022-07-05 mar. 02:05] =>  0:07
CLOCK: [2022-07-04 lun. 00:47]--[2022-07-04 lun. 00:55] =>  0:08
:END:
- [X] Add LICENCE file for GPLv3
- [X] Add a README.md file with installation instruction
- [X] Add doxygen support and generate Doxyfile.in from cmake script  
- [X] Start cmake script for browser and lib
  We need at least one source in lib, start with ConfigReader
- [X] Add a markdown-based doxygen mainpage in src/
